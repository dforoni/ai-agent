{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"App Fluxo de Caixa","text":"<p>               Bases: <code>BaseModel</code></p> <p>Classe de despesas geradas de custos di\u00e1rios.</p> <p>Args: AJUSTAR descricao: DescricaoEnum parcela: PositiveInt | None  # N\u00famero inteiro positivo ou None dt_compra: datetime valor: PositiveFloat nome: NomeEnum conta: ContaEnum observacao: str</p> Source code in <code>contrato.py</code> <pre><code>class Compras(BaseModel):\n    \"\"\"\n    Classe de despesas geradas de custos di\u00e1rios.\n\n    Args: AJUSTAR\n    descricao: DescricaoEnum\n    parcela: PositiveInt | None  # N\u00famero inteiro positivo ou None  \n    dt_compra: datetime\n    valor: PositiveFloat\n    nome: NomeEnum\n    conta: ContaEnum\n    observacao: str\n\n    \"\"\"\n    descricao: DescricaoEnum\n    parcela: PositiveInt | None  # N\u00famero inteiro positivo ou None  \n    dt_compra: datetime\n    valor: PositiveFloat\n    nome: NomeEnum\n    conta: ContaEnum\n    observacao: str | None\n\n    @validator('descricao')\n    def validate_descricao(cls, v):\n        if v not in DescricaoEnum:\n            raise ValueError(f\"{v} n\u00e3o existe essa descri\u00e7\u00e3o.\")\n        return v\n\n    @validator('nome')\n    def validate_nome(cls, v):\n        if v not in NomeEnum:\n            raise ValueError(f\"{v} n\u00e3o existe esse nome.\")\n        return v\n\n    @validator('conta')\n    def validate_conta(cls, v):\n        if v not in ContaEnum:\n            raise ValueError(f\"{v} n\u00e3o existe essa conta.\")\n        return v\n</code></pre>"}]}